This is cl-rest-server.info, produced by makeinfo version 6.7 from
cl-rest-server.texi.

     Common Lisp REST Server 0.2, Feb 15, 2022

     Mariano Montone

     Copyright © 2014, Mariano Montone

INFO-DIR-SECTION Miscellaneous
START-INFO-DIR-ENTRY
* Common Lisp REST Server: (cl-rest-server.info). One line description of project.
END-INFO-DIR-ENTRY


   Generated by Sphinx 1.8.5.


File: cl-rest-server.info,  Node: Top,  Next: Introduction,  Up: (dir)

Common Lisp REST Server Documentation
*************************************

     Common Lisp REST Server 0.2, Feb 15, 2022

     Mariano Montone

     Copyright © 2014, Mariano Montone

Contents:

* Menu:

* Introduction::
* Install::
* API definition::
* API implementation::
* Starting the API::
* Accessing the API::
* Error handling::
* API configuration::
* API documentation::
* API::
* Indices and tables::
* Index::

 — The Detailed Node Listing —

Introduction

* Features::

API definition

* API options::
* Resources::
* Resource operations::
* API example::

Resources

* Resource options::

Resource operations

* Resource operation options::
* Resource operation arguments::

API implementation

Error handling

* Global error mode::

API configuration

* CORS configuration::
* Logging configuration::

CORS configuration

* Options;: Options.



File: cl-rest-server.info,  Node: Introduction,  Next: Install,  Prev: Top,  Up: Top

1 Introduction
**************

`rest-server' is a Common Lisp library for implementing REST APIs
providers

* Menu:

* Features::


File: cl-rest-server.info,  Node: Features,  Up: Introduction

1.1 Features
============

   * Method matching - Based on HTTP method (GET, PUT, POST, DELETE) -
     Based on Accept request header - URL parsing (argument types)

   * Serialization - Different serialization types (JSON, XML,
     S-expressions)

   * Error handling - HTTP error codes - Development and production
     modes

   * Validation via schemas

   * Annotations for api logging, caching, permission checking, and
     more.

   * Authentication - Different methods (token based, oauth)

   * Documentation - Via Swagger: ‘http://swagger.wordnik.com’


File: cl-rest-server.info,  Node: Install,  Next: API definition,  Prev: Introduction,  Up: Top

2 Install
*********

Download the source code from
‘https://github.com/mmontone/cl-rest-server’ and point ‘.asd’ system
definition files from ‘./sbcl/system (ln -s <system definition file
path>)’ and then evaluate:

     (require :rest-server)

from your lisp listener.

You will also need to satisfy these system dependencies:

   - ‘alexandria’

   - ‘cxml’ and ‘cl-json’ for the serialization module

   - ‘cl-ppcre’ for the validation module

The easiest way of installing those packages is via Quicklisp(1)

This library is under the MIT licence.

   ---------- Footnotes ----------

   (1) http://www.quicklisp.org


File: cl-rest-server.info,  Node: API definition,  Next: API implementation,  Prev: Install,  Up: Top

3 API definition
****************

APIs are defined using the *note DEFINE-API: a. macro.  APIs contain
resources and resources contain api-functions.

 -- Common Lisp Macro: (define-apiname superclasses options &body
          resources)

     Define an api.

This is the syntax:

     (define-api <api-name> (&rest <superclasses>) <options-plist>
        &rest
        <resources>)

* Menu:

* API options::
* Resources::
* Resource operations::
* API example::


File: cl-rest-server.info,  Node: API options,  Next: Resources,  Up: API definition

3.1 API options
===============

   - ‘:title’: The API title.  This appears in the generated API
     documentation

   - ‘:documentation’: A string with the API description.  This
     appears in the generated API documentation.


File: cl-rest-server.info,  Node: Resources,  Next: Resource operations,  Prev: API options,  Up: API definition

3.2 Resources
=============

Resources have the following syntax:

     (<resource-name> <resource-options> <api-functions>)

Resources can be added to an already defined API via the
:cl:function::‘with-api’ and *note define-api-resource: d. macros

 -- Common Lisp Macro: (with-apiapi &body body)

     Execute body under api scope.

          Example: (with-api test-api

               (define-resource-operation get-user :get (:url-prefix “users/{id}”)

                    ‘((:id :integer))))

 -- Common Lisp Macro: (define-api-resourcename options &body
          functions)

     Define an api resource.

* Menu:

* Resource options::


File: cl-rest-server.info,  Node: Resource options,  Up: Resources

3.2.1 Resource options
----------------------

   - ‘:produces’: A list of content types produced by this resource.
     The content types can be ‘:json’, ‘:html’, ‘:xml’, ‘:lisp’

   - ‘:consumes’: A list of content types consumed by this resource.

   - ‘:documentation’: A string describing the resource.  This appears
     in the generated API documentation.

   - ‘:path’: The resource path.  Should start with the ‘/’ character.
     Ex: ‘“/users”’

   - ‘:models’: A list of ‘models’ used by the resource


File: cl-rest-server.info,  Node: Resource operations,  Next: API example,  Prev: Resources,  Up: API definition

3.3 Resource operations
=======================

Resources provide a set of operations to access them.

They have the following syntax:

     (<resource-operation-name> <resource-operation-options> <resource-operation-arguments>)

New operations can be added to an already defined resource via the
*note with-api-resource: 11.

 -- Common Lisp Macro: (with-api-resourceresource &body body)

     Execute body under resource scope.

          Example: (with-api-resource users

               (define-resource-operation get-user :get (:url-prefix “users/{id}”)

                    ‘((:id :integer))))

* Menu:

* Resource operation options::
* Resource operation arguments::


File: cl-rest-server.info,  Node: Resource operation options,  Next: Resource operation arguments,  Up: Resource operations

3.3.1 Resource operation options
--------------------------------

   - ‘:request-method’: The HTTP request method

   - ‘:path’: The operation path.  Arguments in the operation are
     enclosed between ‘{}’.  For example: ‘"/users/{id}"’.

   - ‘:produces’: A list of content types produced by the operation.
     The content types can be ‘:json’, ‘:html’, ‘:xml’, ‘:lisp’.  This
     is matched with the HTTP “Accept” header.

   - ‘:consumes’: A list of content types that the operation can
     consume.

   - ‘:authorizations’: A list with the authorizations required for
     the operation.  Can be one of ‘:token’, ‘:oauth’, ‘:oauth’, or a
     custom authorization type.

   - ‘:documentation’: A string describing the operation.  This
     appears in the generated API documentation.


File: cl-rest-server.info,  Node: Resource operation arguments,  Prev: Resource operation options,  Up: Resource operations

3.3.2 Resource operation arguments
----------------------------------

Arguments lists have the following syntax:

     (*<required-arguments> &optional <optional-arguments>)

Required arguments are those appearing in the api function path
between ‘{}’.  They are specified like this:

     (<argument-name> <argument-type> <documentation-string>)

Argument type can be one of: ‘string’, ‘integer’, ‘boolean’, ‘list’.

Optional arguments are those that can be passed after the ‘?’ in the
url.  For instance, the ‘page’ parameter in this url: ‘/users?page=1’.
They are listed after the ‘&optional’ symbol, and have the following
syntax:

     (<argument-name> <argument-type> <default-value> <documentation-string>)

Here is an example of an api function arguments list:

     ((id :integer "The user id")
       &optional (boolean :boolean nil "A boolean parameter")
                 (integer :integer nil "An integer parameter")
                 (string :string nil "A string parameter")
                 (list :list nil "A list parameter"))


File: cl-rest-server.info,  Node: API example,  Prev: Resource operations,  Up: API definition

3.4 API example
===============

Here is a complete example of an API interface:

     (define-api api-test ()
         (:title "Api test"
                 :documentation "This is an api test")
       (parameters (:produces (:json)
                              :consumes (:json)
                              :documentation "Parameters test"
                              :path "/parameters")
                   (parameters (:produces (:json)
                                          :consumes (:json)
                                          :documentation "Parameters test"
                                          :path "/parameters")
                               (&optional (boolean :boolean nil "A boolean parameter")
                                          (integer :integer nil "An integer parameter")
                                          (string :string nil "A string parameter")
                                          (list :list nil "A list parameter"))))
       (users (:produces (:json :xml)
                         :consumes (:json)
                         :documentation "Users operations"
                         :models (user)
                         :path "/users")
              (get-users (:request-method :get
                                          :produces (:json)
                                          :path "/users"
                                          :documentation "Retrive the users list")
                         (&optional (page :integer 1 "The page")
                                    (expand :list nil "Attributes to expand")))
              (get-user (:request-method :get
                                         :produces (:json)
                                         :path "/users/{id}"
                                         :documentation "Retrive an user")
                        ((id :integer "The user id")
                         &optional
                         (expand :list nil "Attributes to expand")))))


File: cl-rest-server.info,  Node: API implementation,  Next: Starting the API,  Prev: API definition,  Up: Top

4 API implementation
********************

APIs need to implement its resources operations.  This is done via the
*note implement-resource-operation: 16. macro.

 -- Common Lisp Macro: (implement-resource-operationapi-name
          name-and-options args &body body)

     Define an resource operation implementation

The required arguments of the resource operation appear as normal
arguments in the function, in the order in which they were declared.
The optional arguments of a resource operation appear as ‘&key’
arguments of the function.  In case the resource operation request
method is either `PUT' or `POST', then a >>‘‘<<posted-content‘
argument should be added to the implementation function as the first
argument.

Some examples:

For this operation:

     (get-user (:request-method :get
                          :produces (:json)
                          :path "/users/{id}"
                          :documentation "Retrive an user")
                         ((id :integer "The user id")
                          &optional
                          (expand :list nil "Attributes to expand")))

The following resource implementation should be defined:

     (implement-resource-operation get-user (id &key expand)
        (serialize (find-user id) :expand expand))

And for this POST operation:

     (create-user (:request-method :post
                                  :consumes (:json)
                                  :path "/users"
                                  :documentation "Create a user"
                                  :body-type user)
                         ())

The ‘posted-content’ argument should be included:

     (implement-resource-operation create-user (posted-content)
        (with-posted-content (name age) posted-content
            (serialize (model:create-user :name name :age age))))


File: cl-rest-server.info,  Node: Starting the API,  Next: Accessing the API,  Prev: API implementation,  Up: Top

5 Starting the API
******************

APIs are started calling the function *note start-api: 1a.

 -- Common Lisp Function: (start-apiapi &rest args)

     Start an api at address and port.

          In production mode, we bind the api directly.  In debug
          mode, we only bind the API name in order to be able to make
          modifications to the api (definition) in development time


File: cl-rest-server.info,  Node: Accessing the API,  Next: Error handling,  Prev: Starting the API,  Up: Top

6 Accessing the API
*******************

The *note define-api: a. macro creates a function for accessing the
api for each resource operation.

Before using the generated functions, the api backend needs to be
selected via the *note with-api-backend: 1c.

 -- Common Lisp Macro: (with-api-backendbackend &body body)

     Execute the client resource operation calling backend

For instance, for the api defined above, an ‘get-user’ and a
‘get-users’ functions are created, which can be used like this:

     (with-api-backend "http://localhost/api"
        (get-user 22))

Assuming the api is running on ‘http://localhost/api’


File: cl-rest-server.info,  Node: Error handling,  Next: API configuration,  Prev: Accessing the API,  Up: Top

7 Error handling
****************

APIs can be run with different error handling modes.  This is
controlled via the argument ‘:catch-errors’ in *note start-api: 1a.
Default is NIL.

 -- Common Lisp Variable: *catch-errors*

If T, then the error is serialize and the corresponding HTTP is
returned.  Otherwise, when an error occurs, the Lisp debugger is
entered.

* Menu:

* Global error mode::


File: cl-rest-server.info,  Node: Global error mode,  Up: Error handling

7.1 Global error mode
=====================

To setup a global error handling mode, that has precedence to
individual running apis error handling modes, set *note
*SERVER-CATCH-ERRORS*: 21. variable.

 -- Common Lisp Variable: *server-catch-errors*


File: cl-rest-server.info,  Node: API configuration,  Next: API documentation,  Prev: Error handling,  Up: Top

8 API configuration
*******************

Some aspects of the api can be configured either passing the
configuration parameters to the *note start-api: 1a. function, or via
the *note configure-api: 24. function.

 -- Common Lisp Function: (configure-apiapi-or-name &rest options)

     Configure or reconfigure an already existent api

* Menu:

* CORS configuration::
* Logging configuration::


File: cl-rest-server.info,  Node: CORS configuration,  Next: Logging configuration,  Up: API configuration

8.1 CORS configuration
======================

APIs can be configured to append CORS(1) headers to responses.

Syntax:

     (configure-api api '(:cors &rest options))

* Menu:

* Options;: Options.

   ---------- Footnotes ----------

   (1) 
https://developer.mozilla.org/en-US/docs/Web/HTTP/Access_control_CORS


File: cl-rest-server.info,  Node: Options,  Up: CORS configuration

8.1.1 Options:
--------------

   - ‘:enabled’: Boolean.  CORS enabled when ‘T’.

   - ‘:allow-origin’: The “AllowOrigin” header.  Default: ‘"*"’

   - ‘:allow-headers’: A list.  The “AllowHeaders” header.

   - ‘:allow-methods’: A list.  The “AllowMethods” header.  Default:
     ‘(list :get :put :post :delete)’


File: cl-rest-server.info,  Node: Logging configuration,  Prev: CORS configuration,  Up: API configuration

8.2 Logging configuration
=========================

Log api requests and responses.

Syntax:

     (configure-api '(:logging &rest options))

Then evaluate :cl:function::‘start-api-logging’

 -- Common Lisp Function: (start-api-logging)


File: cl-rest-server.info,  Node: API documentation,  Next: API,  Prev: API configuration,  Up: Top

9 API documentation
*******************

There’s an (incomplete) implementation of a Swagger(1) export.

First, configure the api for Swagger:

     (define-swagger-resource api)

This will enable CORS(2) on the API, as Swagger needs it to make
requests.

After this you can download the Swagger documentation tool and point
to the api HTTP address.

   ---------- Footnotes ----------

   (1) https://helloreverb.com/developers/swagger

   (2) 
https://developer.mozilla.org/en-US/docs/Web/HTTP/Access_control_CORS


File: cl-rest-server.info,  Node: API,  Next: Indices and tables,  Prev: API documentation,  Up: Top

10 API
******

Rest Server external symbols documentation

 -- Common Lisp Function: (configure-api-resourceapi-or-name
          resource-name &rest options)

 -- Common Lisp Macro: (permission-checkingargs
          resource-operation-implementation)

 -- Common Lisp Function: (accept-serializer)

 -- Common Lisp Macro: serialization

 -- Common Lisp Macro: with-list-member

 -- Common Lisp Macro: (implement-resource-operation-casename
          accept-content-type args &body body)

     Implement an resource operation case

 -- Common Lisp Macro: (with-apiapi &body body)

     Execute body under api scope.

          Example: (with-api test-api

               (define-resource-operation get-user :get (:url-prefix “users/{id}”)

                    ‘((:id :integer))))

 -- Common Lisp Macro: (with-api-backendbackend &body body)

     Execute the client resource operation calling backend

 -- Common Lisp Macro: (implement-resource-operationapi-name
          name-and-options args &body body)

     Define an resource operation implementation

 -- Common Lisp Function: (set-reply-content-typecontent-type)

 -- Common Lisp Macro: with-serializer-output

 -- Common Lisp Function: (http-error)

 -- Common Lisp Macro: define-schema

 -- Common Lisp Function: (disable-api-logging)

 -- Common Lisp Function:
          (format-absolute-resource-operation-urlresource-operation
          &rest args)

 -- Common Lisp Function: (boolean-value)

 -- Common Lisp Function: (start-api-documentationapi address port)

     Start a web documentation application on the given api.

 -- Common Lisp Function: (list-value)

 -- Common Lisp Function: (find-schema)

 -- Common Lisp Macro: (with-xml-reply&body body)

 -- Common Lisp Function: (self-reference&rest args)

 -- Common Lisp Macro: unserialization

 -- Common Lisp Function: (find-apiname &key (error-p t))

     Find api by name

 -- Common Lisp Macro: fetch-content

 -- Common Lisp Function: (serializable-class-schema)

 -- Common Lisp Function: (stop-apiapi-acceptor)

 -- Common Lisp Function: (make-resource-operationname attributes args
          options)

     Make an resource operation.

 -- Common Lisp Function:
          (configure-resource-operation-implementationname &rest
          options)

     Configure or reconfigure an already existent resource operation
     implementation

 -- Common Lisp Function: (configure-apiapi-or-name &rest options)

     Configure or reconfigure an already existent api

 -- Common Lisp Function: (validation-error)

 -- Common Lisp Function: (stop-api-logging)

 -- Common Lisp Function: (elements)

 -- Common Lisp Macro: logging

 -- Common Lisp Function: (start-apiapi &rest args)

     Start an api at address and port.

          In production mode, we bind the api directly.  In debug
          mode, we only bind the API name in order to be able to make
          modifications to the api (definition) in development time

 -- Common Lisp Function: (set-attribute)

 -- Common Lisp Function: (add-list-member)

 -- Common Lisp Macro: with-attribute

 -- Common Lisp Macro: (with-json-reply&body body)

 -- Common Lisp Macro: with-list

 -- Common Lisp Macro: (define-resource-operationname attributes args
          &rest options)

     Helper macro to define an resource operation

 -- Common Lisp Macro: schema

 -- Common Lisp Function: (enable-api-logging)

 -- Common Lisp Macro: define-serializable-class

 -- Common Lisp Macro: validation

 -- Common Lisp Macro: error-handling

 -- Common Lisp Macro: (with-permission-checkingcheck &body body)

 -- Common Lisp Macro: with-serializer

 -- Common Lisp Macro: (define-api-resourcename options &body
          functions)

     Define an api resource.

 -- Common Lisp Function: (start-api-logging)

 -- Common Lisp Macro: define-swagger-resource

 -- Common Lisp Macro: with-element

 -- Common Lisp Variable: *catch-errors*

 -- Common Lisp Macro: (cachingargs resource-operation-implementation)

 -- Common Lisp Macro: (with-api-resourceresource &body body)

     Execute body under resource scope.

          Example: (with-api-resource users

               (define-resource-operation get-user :get (:url-prefix “users/{id}”)

                    ‘((:id :integer))))

 -- Common Lisp Macro: (with-content (&key (setter)) &body body)

     Macro to build HTTP content to pass in client functions.

     Example:

     (with-api-backend `api-backend'

          (let ((content (with-content ()

               (:= :name “name”) (when some-condition

                    (:= :attr 22)))))

          (app.api-client:my-client-function :content content)))

 -- Common Lisp Macro: (with-pagination (&rest args &key (page)
          (object-name) &allow-other-keys) &body body)

 -- Common Lisp Macro: (define-apiname superclasses options &body
          resources)

     Define an api.

 -- Common Lisp Function: (element)

 -- Common Lisp Function: (attribute)

 -- Common Lisp Variable: *server-catch-errors*

 -- Common Lisp Macro: (with-reply-content-type (content-type) &body
          body)

 -- Common Lisp Macro: (with-posted-contentargs posted-content &body
          body)

     Bind ‘ARGS’ to ‘POSTED-CONTENT’.  ‘POSTED-CONTENT’ is supposed to
     be an alist.  Also, argx-P is T(1) iff argx is present in
     ‘POSTED-CONTENT’

   ---------- Footnotes ----------

   (1) http://www.lispworks.com/reference/HyperSpec/Body/a_t.htm


File: cl-rest-server.info,  Node: Indices and tables,  Next: Index,  Prev: API,  Up: Top

Indices and tables
******************

   * genindex

   * search


File: cl-rest-server.info,  Node: Index,  Prev: Indices and tables,  Up: Top

Index
*****

 [index ]
* Menu:

* *catch-errors* (Lisp variable):        Error handling.    (line  10)
* *catch-errors* (Lisp variable) <1>:    API.               (line 156)
* *server-catch-errors* (Lisp variable): Global error mode. (line  10)
* *server-catch-errors* (Lisp variable) <1>: API.           (line 198)
* accept-serializer (Lisp function):     API.               (line  14)
* add-list-member (Lisp function):       API.               (line 118)
* attribute (Lisp function):             API.               (line 196)
* boolean-value (Lisp function):         API.               (line  58)
* caching (Lisp macro):                  API.               (line 158)
* configure-api (Lisp function):         API configuration. (line  10)
* configure-api (Lisp function) <1>:     API.               (line  96)
* configure-api-resource (Lisp function): API.              (line   8)
* configure-resource-operation-implementation (Lisp function): API.
                                                            (line  89)
* define-api (Lisp macro):               API definition.    (line   9)
* define-api (Lisp macro) <1>:           API.               (line 189)
* define-api-resource (Lisp macro):      Resources.         (line  23)
* define-api-resource (Lisp macro) <1>:  API.               (line 145)
* define-resource-operation (Lisp macro): API.              (line 126)
* define-schema (Lisp macro):            API.               (line  50)
* define-serializable-class (Lisp macro): API.              (line 135)
* define-swagger-resource (Lisp macro):  API.               (line 152)
* disable-api-logging (Lisp function):   API.               (line  52)
* element (Lisp function):               API.               (line 194)
* elements (Lisp function):              API.               (line 104)
* enable-api-logging (Lisp function):    API.               (line 133)
* error-handling (Lisp macro):           API.               (line 139)
* fetch-content (Lisp macro):            API.               (line  78)
* find-api (Lisp function):              API.               (line  74)
* find-schema (Lisp function):           API.               (line  66)
* format-absolute-resource-operation-url (Lisp function): API.
                                                            (line  54)
* http-error (Lisp function):            API.               (line  48)
* implement-resource-operation (Lisp macro): API implementation.
                                                            (line   9)
* implement-resource-operation (Lisp macro) <1>: API.       (line  39)
* implement-resource-operation-case (Lisp macro): API.      (line  20)
* list-value (Lisp function):            API.               (line  64)
* logging (Lisp macro):                  API.               (line 106)
* make-resource-operation (Lisp function): API.             (line  84)
* permission-checking (Lisp macro):      API.               (line  11)
* schema (Lisp macro):                   API.               (line 131)
* self-reference (Lisp function):        API.               (line  70)
* serializable-class-schema (Lisp function): API.           (line  80)
* serialization (Lisp macro):            API.               (line  16)
* set-attribute (Lisp function):         API.               (line 116)
* set-reply-content-type (Lisp function): API.              (line  44)
* start-api (Lisp function):             Starting the API.  (line   8)
* start-api (Lisp function) <1>:         API.               (line 108)
* start-api-documentation (Lisp function): API.             (line  60)
* start-api-logging (Lisp function):     Logging configuration.
                                                            (line  14)
* start-api-logging (Lisp function) <1>: API.               (line 150)
* stop-api (Lisp function):              API.               (line  82)
* stop-api-logging (Lisp function):      API.               (line 102)
* unserialization (Lisp macro):          API.               (line  72)
* validation (Lisp macro):               API.               (line 137)
* validation-error (Lisp function):      API.               (line 100)
* with-api (Lisp macro):                 Resources.         (line  13)
* with-api (Lisp macro) <1>:             API.               (line  25)
* with-api-backend (Lisp macro):         Accessing the API. (line  12)
* with-api-backend (Lisp macro) <1>:     API.               (line  35)
* with-api-resource (Lisp macro):        Resource operations.
                                                            (line  15)
* with-api-resource (Lisp macro) <1>:    API.               (line 160)
* with-attribute (Lisp macro):           API.               (line 120)
* with-content (Lisp macro):             API.               (line 170)
* with-element (Lisp macro):             API.               (line 154)
* with-json-reply (Lisp macro):          API.               (line 122)
* with-list (Lisp macro):                API.               (line 124)
* with-list-member (Lisp macro):         API.               (line  18)
* with-pagination (Lisp macro):          API.               (line 186)
* with-permission-checking (Lisp macro): API.               (line 141)
* with-posted-content (Lisp macro):      API.               (line 203)
* with-reply-content-type (Lisp macro):  API.               (line 200)
* with-serializer (Lisp macro):          API.               (line 143)
* with-serializer-output (Lisp macro):   API.               (line  46)
* with-xml-reply (Lisp macro):           API.               (line  68)



Tag Table:
Node: Top387
Ref: index doc649
Ref: 0649
Node: Introduction1329
Ref: introduction doc1417
Ref: 11417
Ref: introduction introduction1417
Ref: 21417
Ref: introduction welcome-to-common-lisp-rest-server-s-documentation1417
Ref: 31417
Node: Features1548
Ref: introduction features1613
Ref: 41613
Node: Install2182
Ref: install doc2281
Ref: 52281
Ref: install install2281
Ref: 62281
Ref: Install-Footnote-12898
Node: API definition2931
Ref: api doc3036
Ref: 73036
Ref: api api-definition3036
Ref: 83036
Ref: api quicklisp3036
Ref: 93036
Ref: api macro rest-server define-api3188
Ref: a3188
Node: API options3501
Ref: api api-options3589
Ref: b3589
Node: Resources3829
Ref: api resources3945
Ref: c3945
Ref: api macro rest-server with-api4199
Ref: e4199
Ref: api macro rest-server define-api-resource4454
Ref: d4454
Node: Resource options4599
Ref: api resource-options4669
Ref: f4669
Node: Resource operations5234
Ref: api resource-operations5350
Ref: 105350
Ref: api macro rest-server with-api-resource5678
Ref: 115678
Node: Resource operation options6032
Ref: api resource-operation-options6159
Ref: 126159
Node: Resource operation arguments7018
Ref: api resource-operation-arguments7145
Ref: 137145
Node: API example8225
Ref: api api-example8323
Ref: 148323
Node: API implementation10319
Ref: api api-implementation10433
Ref: 1510433
Ref: api macro rest-server implement-resource-operation10595
Ref: 1610595
Node: Starting the API12285
Ref: api starting-the-api12402
Ref: 1912402
Ref: api function rest-server start-api12501
Ref: 1a12501
Node: Accessing the API12799
Ref: api accessing-the-api12912
Ref: 1b12912
Ref: api macro rest-server with-api-backend13167
Ref: 1c13167
Node: Error handling13551
Ref: error-handling doc13665
Ref: 1d13665
Ref: error-handling error-handling13665
Ref: 1e13665
Ref: error-handling variable rest-server *catch-errors*13851
Ref: 1f13851
Node: Global error mode14064
Ref: error-handling global-error-mode14140
Ref: 2014140
Ref: error-handling variable rest-server *server-catch-errors*14341
Ref: 2114341
Node: API configuration14390
Ref: api-configuration doc14504
Ref: 2214504
Ref: api-configuration api-configuration14504
Ref: 2314504
Ref: api-configuration function rest-server configure-api14716
Ref: 2414716
Node: CORS configuration14898
Ref: api-configuration cors-configuration15008
Ref: 2515008
Ref: CORS configuration-Footnote-115244
Node: Options15323
Ref: api-configuration options15393
Ref: 2615393
Node: Logging configuration15748
Ref: api-configuration logging-configuration15858
Ref: 2715858
Ref: api-configuration function rest-server start-api-logging16054
Ref: 2816054
Node: API documentation16101
Ref: documentation doc16204
Ref: 2916204
Ref: documentation api-documentation16204
Ref: 2a16204
Ref: API documentation-Footnote-116593
Ref: API documentation-Footnote-216644
Node: API16723
Ref: symbols doc16827
Ref: 2b16827
Ref: symbols api16827
Ref: 2c16827
Ref: symbols function rest-server configure-api-resource16886
Ref: 2d16886
Ref: symbols macro rest-server permission-checking16987
Ref: 2e16987
Ref: symbols function rest-server accept-serializer17081
Ref: 2f17081
Ref: symbols macro rest-server serialization17128
Ref: 3017128
Ref: symbols macro rest-server with-list-member17166
Ref: 3117166
Ref: symbols macro rest-server implement-resource-operation-case17207
Ref: 3217207
Ref: symbols macro rest-server with-api17360
Ref: 3317360
Ref: symbols macro rest-server with-api-backend17615
Ref: 3417615
Ref: symbols macro rest-server implement-resource-operation17736
Ref: 3517736
Ref: symbols function rest-server set-reply-content-type17892
Ref: 3617892
Ref: symbols macro rest-server with-serializer-output17956
Ref: 3717956
Ref: symbols function rest-server http-error18003
Ref: 3818003
Ref: symbols macro rest-server define-schema18043
Ref: 3918043
Ref: symbols function rest-server disable-api-logging18081
Ref: 3a18081
Ref: symbols function rest-server format-absolute-resource-operation-url18130
Ref: 3b18130
Ref: symbols function rest-server boolean-value18247
Ref: 3c18247
Ref: symbols function rest-server start-api-documentation18290
Ref: 3d18290
Ref: symbols function rest-server list-value18421
Ref: 3e18421
Ref: symbols function rest-server find-schema18461
Ref: 3f18461
Ref: symbols macro rest-server with-xml-reply18502
Ref: 4018502
Ref: symbols function rest-server self-reference18553
Ref: 4118553
Ref: symbols macro rest-server unserialization18607
Ref: 4218607
Ref: symbols function rest-server find-api18647
Ref: 4318647
Ref: symbols macro rest-server fetch-content18729
Ref: 4418729
Ref: symbols function rest-server serializable-class-schema18767
Ref: 4518767
Ref: symbols function rest-server stop-api18822
Ref: 4618822
Ref: symbols function rest-server make-resource-operation18872
Ref: 4718872
Ref: symbols function rest-server configure-resource-operation-implementation18997
Ref: 4818997
Ref: symbols function rest-server configure-api19198
Ref: 4919198
Ref: symbols function rest-server validation-error19321
Ref: 4a19321
Ref: symbols function rest-server stop-api-logging19367
Ref: 4b19367
Ref: symbols function rest-server elements19413
Ref: 4c19413
Ref: symbols macro rest-server logging19451
Ref: 4d19451
Ref: symbols function rest-server start-api19483
Ref: 4e19483
Ref: symbols function rest-server set-attribute19781
Ref: 4f19781
Ref: symbols function rest-server add-list-member19824
Ref: 5019824
Ref: symbols macro rest-server with-attribute19869
Ref: 5119869
Ref: symbols macro rest-server with-json-reply19908
Ref: 5219908
Ref: symbols macro rest-server with-list19960
Ref: 5319960
Ref: symbols macro rest-server define-resource-operation19994
Ref: 5419994
Ref: symbols macro rest-server schema20141
Ref: 5520141
Ref: symbols function rest-server enable-api-logging20172
Ref: 5620172
Ref: symbols macro rest-server define-serializable-class20220
Ref: 5720220
Ref: symbols macro rest-server validation20270
Ref: 5820270
Ref: symbols macro rest-server error-handling20305
Ref: 5920305
Ref: symbols macro rest-server with-permission-checking20344
Ref: 5a20344
Ref: symbols macro rest-server with-serializer20411
Ref: 5b20411
Ref: symbols macro rest-server define-api-resource20451
Ref: 5c20451
Ref: symbols function rest-server start-api-logging20565
Ref: 5d20565
Ref: symbols macro rest-server define-swagger-resource20612
Ref: 5e20612
Ref: symbols macro rest-server with-element20660
Ref: 5f20660
Ref: symbols variable rest-server *catch-errors*20697
Ref: 6020697
Ref: symbols macro rest-server caching20739
Ref: 6120739
Ref: symbols macro rest-server with-api-resource20811
Ref: 6220811
Ref: symbols macro rest-server with-content21091
Ref: 6321091
Ref: symbols macro rest-server with-pagination21480
Ref: 6421480
Ref: symbols macro rest-server define-api21600
Ref: 6521600
Ref: symbols function rest-server element21709
Ref: 6621709
Ref: symbols function rest-server attribute21746
Ref: 6721746
Ref: symbols variable rest-server *server-catch-errors*21785
Ref: 6821785
Ref: symbols macro rest-server with-reply-content-type21834
Ref: 6921834
Ref: symbols macro rest-server with-posted-content21920
Ref: 6a21920
Ref: API-Footnote-122215
Node: Indices and tables22281
Ref: index indices-and-tables22373
Ref: 6b22373
Node: Index22440

End Tag Table


Local Variables:
coding: utf-8
End:
